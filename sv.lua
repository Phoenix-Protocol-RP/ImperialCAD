--[[
    Imperial Export for FiveM
DO NOT EDIT THIS FILE UNLESS YOU KNOW WHAT YOUR DOING!
]]--

local function getVersionFromManifest()
    local path = GetResourcePath(GetCurrentResourceName()) .. '/fxmanifest.lua'
    local file = io.open(path, "r")
    if file then
        local content = file:read("*a")
        file:close()

        for line in string.gmatch(content, "[^\r\n]+") do
            local value = string.match(line, "^version%s+'(.+)'$")
            if value then
                return value
            end
        end
    end
    return 'unknown' 
end

local currentVersion = getVersionFromManifest()
local versionUrl = 'https://raw.githubusercontent.com/Zippy01/ImperialCAD/main/version.json'  

function checkForUpdates()
    local currentVersion = getVersionFromManifest()

    PerformHttpRequest(versionUrl, function(err, responseText, headers)
        if err == 200 then  
            local data = json.decode(responseText)
            if data and data.latestVersion and data.latestVersion ~= currentVersion then
                print('[V' .. currentVersion .. '] Update available! Please download the latest version: ' .. data.latestVersion)
            else
                print('You are running the latest version of the script.')
            end
        else
            print('Failed to check for updates.')
        end
    end, 'GET', '')
end

CreateThread(function()
    checkForUpdates()  -- Check for updates when the script starts
end)

--trys to find the discord ID
local function getDiscordId(src)
    if src == nil then return false end
    local identifiers = GetPlayerIdentifiers(src)
    for _, v in pairs(identifiers) do
        if string.sub(v, 1, 8) == "discord:" then
            return string.gsub(v, "discord:", "")
        end
    end
    return false
end

if Config.cadkickonleave then
AddEventHandler('playerDropped', function(reason, resourceName, clientDropReason)
    local playerName = GetPlayerName(source)
     print('Player' .. playerName .. ' dropped, telling ImperialCAD to cleanup')
    
     local discordId = getDiscordId(source)
     if not discordId then
        print("^3[WARN]^7 Discord ID not found for " .. playerName .. "Cannot attempt cleanup")
     else
        if Config.debug then
        print(discordId .. " This is what is trying, ig")
        end

     exports["ImperialCAD"]:Booter({
        users_discordID = discordId
     }, function(success, resultData)
        if success then
            local apires = json.decode(resultData)
            if Config.debug then
            print("Player was booted from CAD")
            end
        else
            if Config.debug then
            print("Imperial CAD did not clean up this player, Is the discord ID verified?")
            end
        end
     end)
    end end)
end

RegisterNetEvent('ImperialCAD:New911')
AddEventHandler('ImperialCAD:New911', function(callData)

    if not callData.name or not callData.street or not callData.crossStreet or not callData.postal or not callData.info then
        print("Error: Missing required call data.")
        return  
    end

    exports["ImperialCAD"]:Create911Call({
        name = callData.name,
        street = callData.street,
        crossStreet = callData.crossStreet,
        info = callData.info,
        postal = callData.postal,
        city = callData.city,
        county = callData.county
    }, function(success, resultData)
        if success then 
            print("911 Call Was sent to Emergency Services!")
            else 
                print("911 could not be sent.")
            end
    end)
end)

if Config.PlateThroughChat then
RegisterNetEvent('ImperialCAD:CheckPlate')
AddEventHandler('ImperialCAD:CheckPlate', function(callData)
    local src = source

    if not callData.plate then
        print("Error: Missing required plate")
        return
    end

    exports["ImperialCAD"]:CheckPlate({
        plate = callData.plate
    }, function(success, resultData)
        if not success or not resultData then
            Notify("Error: We couldnt find this plate, its likely not registered", src)
            return
        end

        local data = json.decode(resultData)
        if not data or data.status ~= "success" then
            print("Error: Invalid API response or status not successful.")
            return
        end

        local response = data.response

        if success and resultData then
            Notify("The following flags/alerts where found for plate: " .. response.plate, src)
        end

        if response.stolen then
            Notify("Alert: Vehicle reported STOLEN", src)
        end

        if not response.insurance then
            Notify("Warning: No insurance found", src)
        end

        if response.insurance and response.insurance_status ~= "ACTIVE" then
            Notify("Warning: Vehicle insurance is " .. response.insurance_status, src)
        end

        if response.business then
            Notify("Note: Vehicle is registered to a business.", src)
        end

        if response.reg_status ~= "ACTIVE" then
            Notify("Attention: Vehicle registration is " .. response.reg_status, src)
        end

        if response.owner_wanted then
            Notify("Alert: Owner is wanted by authorities.", src)
        end

        if response.owner_dl_status ~= "ACTIVE" then
            Notify("Alert: Owners License is " .. response.owner_dl_status, src)
        end
    end)
end)
end

RegisterNetEvent('ImperialCAD:TrafficStop')
AddEventHandler('ImperialCAD:TrafficStop', function(callData)

    exports["ImperialCAD"]:CreateCall({
        users_discordID = getDiscordId(source),
        street = callData.street,
        cross_street = callData.crossStreet,
        postal = callData.postal,
        city = callData.city,
        county = callData.county,
        info = callData.info,
        nature = Config.trafficsnature,
        status = Config.trafficsstatus,
        priority = Config.trafficspriority
    }, function(success, resultData)
        if success then
            local apires = json.decode(resultData)
            if not apires or not apires.response or not apires.response.callId then
                print("^1[ERROR]^7 Invalid response or call ID not found")
                return
            end
            local callnum = apires.response.callnum
            print("911 Call created successfully: Call ID -", callnum)
        else
            print(resultData)
        end
    end)
end)

RegisterNetEvent('ImperialCAD:AttachCall')
AddEventHandler('ImperialCAD:AttachCall', function(callData)

    exports["ImperialCAD"]:AttachCall({
        users_discordID = getDiscordId(source),
        callnum = callData.callnum
    }, function(success, resultData)
        if Config.debug then
        if success then
               print("User was attached to the call?")
                return
            end
               print("^1[ERROR]^7 Unable to attach user to call")
        else
            print(resultData)
        end
    end)
end)

RegisterNetEvent('ImperialCAD:CloseCall')
AddEventHandler('ImperialCAD:CloseCall', function(callData)

    exports["ImperialCAD"]:DeleteCall({
        discordid = getDiscordId(source),
        callId = callData.callId,
    }, function(success, resultData)
    end)
end)

RegisterNetEvent('ImperialCAD:Panic')
AddEventHandler('ImperialCAD:Panic', function(callData)

    exports["ImperialCAD"]:Panic({
        users_discordID = getDiscordId(source),
        postal = callData.postal,
        street = callData.street
    }, function(success, resultData)
        if success then
            print("Panic was triggered")
        else
            print("Unable to trigger panic")
        end
    end)
end)

RegisterNetEvent('ImperialCAD:ClearPanic')
AddEventHandler('ImperialCAD:ClearPanic', function()

    exports["ImperialCAD"]:ClearPanic(function(success, resultData)
        if success then
            print("Panic was cleared")
        else 
            print("Unable to clear community panic")
        end
    end)
end)

function Notify(message, playerId)
    TriggerClientEvent('chat:addMessage', playerId, {
        color = {255, 0, 0},
        multiline = true,
        args = {"ImperialCAD", message}
    })
end

RegisterNetEvent("Imperial:911ChatMessage")
AddEventHandler("Imperial:911ChatMessage", function(name, street, message, crossStreet, postal)

    local chatMessage = {
        multiline = true,
        args = {"^8(Imperial911 - New Call For Service)",
            "\nName: ^3" .. name .. "^7\nPostal: ^3" .. postal .. "^7\nStreet: ^3" .. street .. 
            "^7\nCross Street: ^3" .. crossStreet .. "^7\nInformation: ^3" .. message
        }
    }

    local success, onDutyUnits = pcall(function()
        return exports["ImperialDuty"]:GetOnDutyUnits()
    end)

    if success and onDutyUnits then
        for _, playerId in ipairs(onDutyUnits) do
            TriggerClientEvent("chat:addMessage", playerId, chatMessage)
        end
    else
        TriggerClientEvent("chat:addMessage", -1, chatMessage)
        end
end)

RegisterNetEvent("ImperialCAD:911Blip")
AddEventHandler("ImperialCAD:911Blip", function(coords)

    local success, OnDutyUnitsFound = pcall(function()
        return exports['ImperialDuty']:GetOnDutyUnits()
     end)
     
     if success then
    for _, playerId in ipairs(OnDutyUnitsFound) do
           if Config.debug then
           print("Got a success, Proceeding with blips")
           end
        TriggerClientEvent("Imperial:911BlipForOnduty", playerId, coords)
    end
    else
           if Config.debug then
           print("Couldnt find ImperialDuty, proceeding without blip.")
           end
    end

end)